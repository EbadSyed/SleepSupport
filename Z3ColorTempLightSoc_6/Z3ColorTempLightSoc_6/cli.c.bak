// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//



#include "app/framework/include/af.h"
#include "app/framework/cli/custom-cli.h"


void echoCommand(void);
void emAfBulbPwmLedBlinkCommand(void);
void emAfBulbPwmLedOffCommand(void);
void emAfBulbPwmLedOnCommand(void);
void emAfBulbPwmLedPatternCommand(void);
void emAfBulbPwmSetCommand(void);
void emAfBulbPwmStatusBlinkCommand(void);
void emAfBulbPwmStatusOffCommand(void);
void emAfBulbPwmStatusOnCommand(void);
void emAfBulbPwmStatusPatternCommand(void);
void emAfCliBsendCommand(void);
void emAfCliInfoCommand(void);
void emAfCliRawCommand(void);
void emAfCliReadCommand(void);
void emAfCliSendCommand(void);
void emAfCliTimesyncCommand(void);
void emAfCliVersionCommand(void);
void emAfCliWriteCommand(void);
void emAfConfigurationServerLockCommand(void);
void emAfConfigurationServerReadCommand(void);
void emAfConfigurationServerSetCommand(void);
void emAfMfglibEnableMfglib(void);
void emAfMfglibPrintcalData(void);
void emAfMfglibProgramEuiCommand(void);
void emAfMfglibSendCommand(void);
void emAfMfglibSendMessageCommand(void);
void emAfMfglibSetChannelCommand(void);
void emAfMfglibSetOptions(void);
void emAfMfglibSetPowerAndModeCommand(void);
void emAfMfglibSleepCommand(void);
void emAfMfglibStartCommand(void);
void emAfMfglibStatusCommand(void);
void emAfMfglibStopCommand(void);
void emAfMfglibStreamStartCommand(void);
void emAfMfglibStreamStopCommand(void);
void emAfMfglibSynoffsetCommand(void);
void emAfMfglibTestModCalCommand(void);
void emAfMfglibToneStartCommand(void);
void emAfMfglibToneStopCommand(void);
void emAfOtaClientPrintState(void);
void emAfOtaImageDelete(void);
void emAfOtaPrintAllImages(void);
void emAfOtaReloadStorageDevice(void);
void emAfOtaStorageDataPrint(void);
void emAfOtaStorageInfoPrint(void);
void emAfSendImageBlockRequestTest(void);
void emberAfPluginIdleSleepAwakeWhenNotJoinedCommand(void);
void emberAfPluginIdleSleepStatusCommand(void);
void emberAfPluginIdleSleepStayAwakeCommand(void);
void emberAfPrintAttributeTable(void);
void findJoinableNetworkCommand(void);
void findUnusedPanIdCommand(void);
void helpCommand(void);
void interpanCommand(void);
void interpanLongCommand(void);
void networkChangeChannelCommand(void);
void networkExtendedPanIdCommand(void);
void networkFormCommand(void);
void networkIdCommand(void);
void networkInitCommand(void);
void networkJoinCommand(void);
void networkLeaveCommand(void);
void networkPermitJoinCommand(void);
void networkRejoinCommand(void);
void networkRejoinDiffDeviceTypeCommand(void);
void networkSetCommand(void);
void optionApsRetryCommand(void);
void optionBindingTableClearCommand(void);
void optionBindingTablePrintCommand(void);
void optionBindingTableSetCommand(void);
void optionDiscoverCommand(void);
void optionEndDeviceBindCommand(void);
void otaCliBootload(void);
void otaCliVerify(void);
void otaPrintClientInfo(void);
void otaSendUpgradeRequest(void);
void otaStartClientCommand(void);
void otaStopClientCommand(void);
void printBootloaderInfoCommand(void);
void printEvents(void);
void resetCommand(void);
void setPageRequest(void);
void setPausePercentage(void);
void zclGlobalCommandDiscoveryCommand(void);
void zclGlobalDirectionCommand(void);
void zclGlobalDiscoverCommand(void);
void zclGlobalExpectReportFromMeCommand(void);
void zclGlobalReadCommand(void);
void zclGlobalReportCommand(void);
void zclGlobalReportReadCommand(void);
void zclGlobalSendMeAReportCommand(void);
void zclGlobalWriteCommand(void);
void zclIdentifyOnOffCommand(void);
void zclTestResponseOffCommand(void);
void zclTestResponseOnCommand(void);
void zdoActiveEpCommand(void);
void zdoAddClusterCommand(void);
void zdoBindCommand(void);
void zdoClearClusterCommand(void);
void zdoIeeeAddressRequestCommand(void);
void zdoLeaveRequestCommand(void);
void zdoMatchCommand(void);
void zdoMgmtBindCommand(void);
void zdoMgmtLqiCommand(void);
void zdoNetworkUpdateChannelCommand(void);
void zdoNetworkUpdateScanCommand(void);
void zdoNetworkUpdateSetCommand(void);
void zdoNodeCommand(void);
void zdoNwkAddressRequestCommand(void);
void zdoPowerDescriptorRequestCommand(void);
void zdoRouteRequestCommand(void);
void zdoSimpleCommand(void);
void zdoUnbindGroupCommand(void);
void zdoUnbindUnicastCommand(void);
#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoUnbindGroupCommandArguments[] = {
  "Target node ID",
  "The source EUI64 of the binding (the remote device's EUI64)",
  "The source endpoint of the binding.",
  "The cluster ID to unbind.",
  "The group address in the binding",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoUnbindUnicastCommandArguments[] = {
  "Target node ID",
  "The source EUI64 of the binding (the remote device's EUI64)",
  "The source endpoint of the binding.",
  "The cluster ID to unbind.",
  "The destination EUI64 in the binding (usually the local node's EUI64",
  "The destination endpoint of the binding",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZdoUnbindCommands[] = {
  emberCommandEntryActionWithDetails("group", zdoUnbindGroupCommand, "vbuvv", "Sends an unbind request for a multicast binding to the target device.", emberCommandTableZdoUnbindGroupCommandArguments),
  emberCommandEntryActionWithDetails("unicast", zdoUnbindUnicastCommand, "vbuvbu", "Sends an unbind request for a unicast binding to the target device.", emberCommandTableZdoUnbindUnicastCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoOutClListAddCommandArguments[] = {
  "Client cluster ids",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZdoOutClListCommands[] = {
  emberCommandEntryActionWithDetails("add", zdoAddClusterCommand, "v", "Add clusters to the known client (out) clusters on this device.", emberCommandTableZdoOutClListAddCommandArguments),
  emberCommandEntryActionWithDetails("clear", zdoClearClusterCommand, "", "Clear the ZDO list of client (out) clusters.", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoNwkUpdChanCommandArguments[] = {
  "One byte channel to change to.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoNwkUpdScanCommandArguments[] = {
  "Two byte short id of the target device",
  "One byte scan duration. Must be in range 0 - 5",
  "Number of scans to perform. Must be in range 1 - 8",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoNwkUpdSetCommandArguments[] = {
  "Two byte network manager id",
  "Four byte channel mask",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZdoNwkUpdCommands[] = {
  emberCommandEntryActionWithDetails("chan", zdoNetworkUpdateChannelCommand, "u", "Sends an update channel request.", emberCommandTableZdoNwkUpdChanCommandArguments),
  emberCommandEntryActionWithDetails("scan", zdoNetworkUpdateScanCommand, "vuv", "Performs an energy scan.", emberCommandTableZdoNwkUpdScanCommandArguments),
  emberCommandEntryActionWithDetails("set", zdoNetworkUpdateSetCommand, "vw", "Broadcasts the ID of the new network manager and active channels.", emberCommandTableZdoNwkUpdSetCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoInClListAddCommandArguments[] = {
  "Server cluster id",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZdoInClListCommands[] = {
  emberCommandEntryActionWithDetails("add", zdoAddClusterCommand, "v", "Add clusters to the known server (in) clusters on this device.", emberCommandTableZdoInClListAddCommandArguments),
  emberCommandEntryActionWithDetails("clear", zdoClearClusterCommand, "", "Clear the ZDO list of server (in) clusters.", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoActiveCommandArguments[] = {
  "Two byte short id, destination for the active endpoint request",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoBindCommandArguments[] = {
  "Two byte destination node id",
  "Remote device's source endpoint to bind",
  "Remote endpoint to bind",
  "Cluster on which to bind",
  "Remote node EUI64",
  "Binding's dest EUI64.  Usually the local node's EUI64",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoIeeeCommandArguments[] = {
  "Short address of the device for which a long address is requested",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoLeaveCommandArguments[] = {
  "Target node ID",
  "Remove children",
  "Rejoin after leave",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoMatchCommandArguments[] = {
  "Two byte node id indicating wher",
  "Two byte profile id for the match descriptor request",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoMgmtBindCommandArguments[] = {
  "Target node ID",
  "Starting index into table query",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoMgmtLqiCommandArguments[] = {
  "Target node ID",
  "Starting index into table query",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoNodeCommandArguments[] = {
  "Two byte address for the target device.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoNwkCommandArguments[] = {
  "IEEE address for which a short address is being requested",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoPowerCommandArguments[] = {
  "Target node ID",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoRouteCommandArguments[] = {
  "Target node ID",
  "The index of the remote node's routing table to request.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZdoSimpleCommandArguments[] = {
  "Short address of the device where the simple descriptor request should ...",
  "The endpoint on the target device where the simple descriptor request  ...",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZdoCommands[] = {
  emberCommandEntryActionWithDetails("active", zdoActiveEpCommand, "v", "Send an active endpoint request to the device with the given short id.", emberCommandTableZdoActiveCommandArguments),
  emberCommandEntryActionWithDetails("bind", zdoBindCommand, "vuuvbb", "Send a ZDO Bind command to a device specified in the command arguments ...", emberCommandTableZdoBindCommandArguments),
  emberCommandEntryActionWithDetails("ieee", zdoIeeeAddressRequestCommand, "v", "Request an ieee address based on a given node id.", emberCommandTableZdoIeeeCommandArguments),
  emberCommandEntrySubMenu("in-cl-list", emberCommandTableZdoInClListCommands, ""),
  emberCommandEntryActionWithDetails("leave", zdoLeaveRequestCommand, "vuu", "Send a ZDO Management Leave command to the target device.", emberCommandTableZdoLeaveCommandArguments),
  emberCommandEntryActionWithDetails("match", zdoMatchCommand, "vv", "Sends a matchDescriptorsRequest to the given destination with the give ...", emberCommandTableZdoMatchCommandArguments),
  emberCommandEntryActionWithDetails("mgmt-bind", zdoMgmtBindCommand, "vu", "Send a ZDO MGMT-Bind (Binding Table) Request to the target device.", emberCommandTableZdoMgmtBindCommandArguments),
  emberCommandEntryActionWithDetails("mgmt-lqi", zdoMgmtLqiCommand, "vu", "Send a ZDO MGMT-LQI (LQI Table) Request to the target device.", emberCommandTableZdoMgmtLqiCommandArguments),
  emberCommandEntryActionWithDetails("node", zdoNodeCommand, "v", "Sends a node descriptor request to a given target device", emberCommandTableZdoNodeCommandArguments),
  emberCommandEntryActionWithDetails("nwk", zdoNwkAddressRequestCommand, "b", "Sends a network address request for the given IEEE address.", emberCommandTableZdoNwkCommandArguments),
  emberCommandEntrySubMenu("nwk-upd", emberCommandTableZdoNwkUpdCommands, ""),
  emberCommandEntrySubMenu("out-cl-list", emberCommandTableZdoOutClListCommands, ""),
  emberCommandEntryActionWithDetails("power", zdoPowerDescriptorRequestCommand, "v", "Send a ZDO Power Descriptor Request to the target device.", emberCommandTableZdoPowerCommandArguments),
  emberCommandEntryActionWithDetails("route", zdoRouteRequestCommand, "vu", "Send a ZDO route request command to the target.", emberCommandTableZdoRouteCommandArguments),
  emberCommandEntryActionWithDetails("simple", zdoSimpleCommand, "vu", "Sends out a simple descriptor request for the short address and endpoi ...", emberCommandTableZdoSimpleCommandArguments),
  emberCommandEntrySubMenu("unbind", emberCommandTableZdoUnbindCommands, ""),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTableZclTestResponseCommands[] = {
  emberCommandEntryActionWithDetails("off", zclTestResponseOffCommand, "", "Sets a flag so that the application framework WILL NOT respond to the  ...", NULL),
  emberCommandEntryActionWithDetails("on", zclTestResponseOnCommand, "", "Sets a flag so that the application framework WILL respond to the next ...", NULL),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTableZclTestCommands[] = {
  emberCommandEntrySubMenu("response", emberCommandTableZclTestResponseCommands, ""),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclIdentifyOffCommandArguments[] = {
  "The endpoint on which to stop identifying",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclIdentifyOnCommandArguments[] = {
  "The endpoint on the device which should begin identifying",
  "The number of seconds to spend identifying",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZclIdentifyCommands[] = {
  emberCommandEntryActionWithDetails("off", zclIdentifyOnOffCommand, "u", "Writes the IdentifyTime attribute", emberCommandTableZclIdentifyOffCommandArguments),
  emberCommandEntryActionWithDetails("on", zclIdentifyOnOffCommand, "uv", "Writes the IdentifyTime attribute", emberCommandTableZclIdentifyOnCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalDirectionCommandArguments[] = {
  "The direction for global commands, 0 = client to server, 1 = server to ...",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalDiscComGenCommandArguments[] = {
  "The cluster to find commands on.",
  "The command id to start the command search on.",
  "Max command ids to search for.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalDiscComRecCommandArguments[] = {
  "The cluster to find commands on.",
  "The command id to start the command search on.",
  "Max command ids to search for.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalDiscoverCommandArguments[] = {
  "The cluster id of the cluster to discover.",
  "The attribute id of the attribute to read during discovery.",
  "Max number of discovery responses.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalExpectReportFromMeCommandArguments[] = {
  "The cluster id for the requested report.",
  "The attribute id for the requested report.",
  "Maximum amount of time between reports.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalNwriteCommandArguments[] = {
  "The cluster id of the cluster to read from.",
  "The attribute id of the attribute to read.",
  "The type of the attribute to write.",
  "The data to be written.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalReadCommandArguments[] = {
  "The cluster id of the cluster to read from.",
  "The attribute id of the attribute to read.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalReportCommandArguments[] = {
  "The desired endpoint.",
  "The cluster id.",
  "The attribute id.",
  "The mask.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalReportReadCommandArguments[] = {
  "The cluster id to read from.",
  "The attribute id to read from.",
  "0 for client-to-server, 1 for server-to-client.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalSendMeAReportCommandArguments[] = {
  "The cluster id of the requested report.",
  "The attribute id for requested report.",
  "The two byte ZigBee type value for the requested report.",
  "Minimum number of seconds between reports.",
  "Maximum number of seconds between reports.",
  "Amount of change to trigger a report.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalUwriteCommandArguments[] = {
  "The cluster id of the cluster to write to.",
  "The attribute id of the attribute to write.",
  "The type of the attribute to write.",
  "The data to be written.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableZclGlobalWriteCommandArguments[] = {
  "The cluster id of the cluster to write to.",
  "The attribute id of the attribute to write.",
  "The type of the attribute to write.",
  "The data to be written.",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableZclGlobalCommands[] = {
  emberCommandEntryActionWithDetails("direction", zclGlobalDirectionCommand, "u", "Sets the direction for global commands, either client to server or ser ...", emberCommandTableZclGlobalDirectionCommandArguments),
  emberCommandEntryActionWithDetails("disc-com-gen", zclGlobalCommandDiscoveryCommand, "vuu", "Create a Discover Commands Generated command with associated values.", emberCommandTableZclGlobalDiscComGenCommandArguments),
  emberCommandEntryActionWithDetails("disc-com-rec", zclGlobalCommandDiscoveryCommand, "vuu", "Create a Discover Commands Received command with associated values.", emberCommandTableZclGlobalDiscComRecCommandArguments),
  emberCommandEntryActionWithDetails("discover", zclGlobalDiscoverCommand, "vvu", "Creates discovery message for devices with the associated cluster and  ...", emberCommandTableZclGlobalDiscoverCommandArguments),
  emberCommandEntryActionWithDetails("expect-report-from-me", zclGlobalExpectReportFromMeCommand, "vvv", "Create a expect-report-from-me message with associated values.", emberCommandTableZclGlobalExpectReportFromMeCommandArguments),
  emberCommandEntryActionWithDetails("nwrite", zclGlobalWriteCommand, "vvub", "Creates a global write command message to write to the cluster and att ...", emberCommandTableZclGlobalNwriteCommandArguments),
  emberCommandEntryActionWithDetails("read", zclGlobalReadCommand, "vv", "Creates a global read command message to read from the cluster and att ...", emberCommandTableZclGlobalReadCommandArguments),
  emberCommandEntryActionWithDetails("report", zclGlobalReportCommand, "uvvu", "", emberCommandTableZclGlobalReportCommandArguments),
  emberCommandEntryActionWithDetails("report-read", zclGlobalReportReadCommand, "vvu", "Creates a global read reporting command for the associated cluster, at ...", emberCommandTableZclGlobalReportReadCommandArguments),
  emberCommandEntryActionWithDetails("send-me-a-report", zclGlobalSendMeAReportCommand, "vvuvvb", "Creates a global send me a report command for the associated values.", emberCommandTableZclGlobalSendMeAReportCommandArguments),
  emberCommandEntryActionWithDetails("uwrite", zclGlobalWriteCommand, "vvub", "Creates a global write undivided command message to write to the clust ...", emberCommandTableZclGlobalUwriteCommandArguments),
  emberCommandEntryActionWithDetails("write", zclGlobalWriteCommand, "vvwb", "Creates a global write command message to write to the cluster and att ...", emberCommandTableZclGlobalWriteCommandArguments),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTableZclCommands[] = {
  emberCommandEntrySubMenu("global", emberCommandTableZclGlobalCommands, ""),
  emberCommandEntrySubMenu("identify", emberCommandTableZclIdentifyCommands, ""),
  emberCommandEntrySubMenu("test", emberCommandTableZclTestCommands, ""),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTablePrintCommands[] = {
  emberCommandEntryActionWithDetails("attr", emberAfPrintAttributeTable, "", "Print the attribute table.", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginOtaStorageCommonDataPrintCommandArguments[] = {
  "The index of the image to print its data.",
  "The offset into the OTA image that will be printed.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginOtaStorageCommonDeleteCommandArguments[] = {
  "The index at which to begin bootloading the image",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginOtaStorageCommonCommands[] = {
  emberCommandEntryActionWithDetails("data-print", emAfOtaStorageDataPrint, "uw", "Print arbitray bytes of the OTA image on disk.", emberCommandTablePluginOtaStorageCommonDataPrintCommandArguments),
  emberCommandEntryActionWithDetails("delete", emAfOtaImageDelete, "u", "Deletes the image at the specified index.", emberCommandTablePluginOtaStorageCommonDeleteCommandArguments),
  emberCommandEntryActionWithDetails("printImages", emAfOtaPrintAllImages, "", "Prints the images.", NULL),
  emberCommandEntryActionWithDetails("reload", emAfOtaReloadStorageDevice, "", "Reload the storage device.", NULL),
  emberCommandEntryActionWithDetails("storage-info", emAfOtaStorageInfoPrint, "", "Print information about the storage device.", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginOtaClientBootloadCommandArguments[] = {
  "The index at which to begin bootloading the image",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginOtaClientPageRequestCommandArguments[] = {
  "boolean value turning on (1) or off (0) the page request flag",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginOtaClientPauseAtCommandArguments[] = {
  "stop download percentage",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginOtaClientVerifyCommandArguments[] = {
  "The index at which to begin verification of the image",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginOtaClientCommands[] = {
  emberCommandEntryActionWithDetails("block-test", emAfSendImageBlockRequestTest, "", "Sends an image block request for a file the server should not hav ...", NULL),
  emberCommandEntryActionWithDetails("bootload", otaCliBootload, "u", "Bootloads the image at the specified index by calling the OTA bootload ...", emberCommandTablePluginOtaClientBootloadCommandArguments),
  emberCommandEntryActionWithDetails("info", otaPrintClientInfo, "", "Prints the manufacturer ID, Image Type ID, and Version information tha ...", NULL),
  emberCommandEntryActionWithDetails("page-request", setPageRequest, "u", "", emberCommandTablePluginOtaClientPageRequestCommandArguments),
  emberCommandEntryActionWithDetails("pause-at", setPausePercentage, "u", "", emberCommandTablePluginOtaClientPauseAtCommandArguments),
  emberCommandEntryActionWithDetails("start", otaStartClientCommand, "", "Starts the ota client state machin ...", NULL),
  emberCommandEntryActionWithDetails("status", emAfOtaClientPrintState, "", "Prints information on the current state of the OTA client download.", NULL),
  emberCommandEntryActionWithDetails("stop", otaStopClientCommand, "", "Stops the OTA state machine", NULL),
  emberCommandEntryActionWithDetails("upgrade-request", otaSendUpgradeRequest, "", "Send an OTA server an UpgradeEndRequest", NULL),
  emberCommandEntryActionWithDetails("verify", otaCliVerify, "u", "Perform signature verification on the image at the specified index", emberCommandTablePluginOtaClientVerifyCommandArguments),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTablePluginOtaBootloadCommands[] = {
  emberCommandEntryActionWithDetails("info", printBootloaderInfoCommand, "", "Prints info about the installed bootloader.", NULL),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTablePluginMfglibToneCommands[] = {
  emberCommandEntryActionWithDetails("start", emAfMfglibToneStartCommand, "", "Starts a tone test.", NULL),
  emberCommandEntryActionWithDetails("stop", emAfMfglibToneStopCommand, "", "Stops the tone test.", NULL),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTablePluginMfglibStreamCommands[] = {
  emberCommandEntryActionWithDetails("start", emAfMfglibStreamStartCommand, "", "Start the stream test.", NULL),
  emberCommandEntryActionWithDetails("stop", emAfMfglibStreamStopCommand, "", "Stop the stream test.", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSendMessageCommandArguments[] = {
  "The hex data to send, up to 16 bytes.",
  "The number of packets to send.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSendRandomCommandArguments[] = {
  "The number of packets to send.",
  "The length of the packet to send.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSendTestCommandArguments[] = {
  "The number of packets to send.",
  "The length of the packet to send.",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginMfglibSendCommands[] = {
  emberCommandEntryActionWithDetails("message", emAfMfglibSendMessageCommand, "bv", "Send a test message with the specified data in it.", emberCommandTablePluginMfglibSendMessageCommandArguments),
  emberCommandEntryActionWithDetails("random", emAfMfglibSendCommand, "vu", "Send a series of test packets with random data..", emberCommandTablePluginMfglibSendRandomCommandArguments),
  emberCommandEntryActionWithDetails("test", emAfMfglibSendCommand, "vu", "Send a series of test packets with fixed data.", emberCommandTablePluginMfglibSendTestCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibMfgenableCommandArguments[] = {
  "1 = enable, 0 = disable.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibProgramEuiCommandArguments[] = {
  "IEEE address to program.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSetChannelCommandArguments[] = {
  "The 802.15.4 channel number.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSetOptionsCommandArguments[] = {
  "The options bitmask (0 = normal transmit, 1 = CSMA transmit).",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSetPowerCommandArguments[] = {
  "The power level",
  "The power mode",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSleepCommandArguments[] = {
  "Sleep duration (mS).",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibStartCommandArguments[] = {
  "Use the Rx callback.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibSynOffsetCommandArguments[] = {
  "The synth offset.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginMfglibTestModCalCommandArguments[] = {
  "The channel to calibrate.",
  "The length of time to run the test is ms.",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginMfglibCommands[] = {
  emberCommandEntryActionWithDetails("caldata", emAfMfglibPrintcalData, "", "Print out channel calibration data.", NULL),
  emberCommandEntryActionWithDetails("mfgenable", emAfMfglibEnableMfglib, "u", "Enable mfglib.", emberCommandTablePluginMfglibMfgenableCommandArguments),
  emberCommandEntryActionWithDetails("programEui", emAfMfglibProgramEuiCommand, "b", "Program EUI.", emberCommandTablePluginMfglibProgramEuiCommandArguments),
  emberCommandEntrySubMenu("send", emberCommandTablePluginMfglibSendCommands, ""),
  emberCommandEntryActionWithDetails("set-channel", emAfMfglibSetChannelCommand, "u", "Sets the channel used by the manufacturing library for testing.", emberCommandTablePluginMfglibSetChannelCommandArguments),
  emberCommandEntryActionWithDetails("set-options", emAfMfglibSetOptions, "u", "Sets options in the manufacturing library for testing.", emberCommandTablePluginMfglibSetOptionsCommandArguments),
  emberCommandEntryActionWithDetails("set-power", emAfMfglibSetPowerAndModeCommand, "sv", "Set the power level and mode for the manufacturing test.", emberCommandTablePluginMfglibSetPowerCommandArguments),
  emberCommandEntryActionWithDetails("sleep", emAfMfglibSleepCommand, "v", "Sleep.", emberCommandTablePluginMfglibSleepCommandArguments),
  emberCommandEntryActionWithDetails("start", emAfMfglibStartCommand, "u", "Start the mfglib test mode.", emberCommandTablePluginMfglibStartCommandArguments),
  emberCommandEntryActionWithDetails("status", emAfMfglibStatusCommand, "", "Prints the current status of the manufacturing library.", NULL),
  emberCommandEntryActionWithDetails("stop", emAfMfglibStopCommand, "", "Stop the mfglib test mode.", NULL),
  emberCommandEntrySubMenu("stream", emberCommandTablePluginMfglibStreamCommands, ""),
  emberCommandEntryActionWithDetails("syn-offset", emAfMfglibSynoffsetCommand, "s", "Sets the Synth offset.", emberCommandTablePluginMfglibSynOffsetCommandArguments),
  emberCommandEntryActionWithDetails("test-mod-cal", emAfMfglibTestModCalCommand, "uw", "Run the mod DAC calibration on the specified channel for the specified ...", emberCommandTablePluginMfglibTestModCalCommandArguments),
  emberCommandEntrySubMenu("tone", emberCommandTablePluginMfglibToneCommands, ""),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginIdleSleepAwakeWhenNotJoinedCommandArguments[] = {
  "The value indicating whether the device should stay awake when not joi ...",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginIdleSleepForceAwakeCommandArguments[] = {
  "The value indicating whether the device should stay awake.",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginIdleSleepCommands[] = {
  emberCommandEntryActionWithDetails("awake-when-not-joined", emberAfPluginIdleSleepAwakeWhenNotJoinedCommand, "u", "Sets whether the device stays awake when not joined to a ZigBee networ ...", emberCommandTablePluginIdleSleepAwakeWhenNotJoinedCommandArguments),
  emberCommandEntryActionWithDetails("force-awake", emberAfPluginIdleSleepStayAwakeCommand, "u", "Sets whether the device is forced to stay awake.", emberCommandTablePluginIdleSleepForceAwakeCommandArguments),
  emberCommandEntryActionWithDetails("status", emberAfPluginIdleSleepStatusCommand, "", "Display the status of the sleeping behavior.", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginConfigurationServerLockCommandArguments[] = {
  "True means lock, false means unlock.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginConfigurationServerSetCommandArguments[] = {
  "True means lock, false means unlock.",
  "Data to use to write the token.",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginConfigurationServerCommands[] = {
  emberCommandEntryActionWithDetails("lock", emAfConfigurationServerLockCommand, "u", "Lock/unlock the configuration cluster.", emberCommandTablePluginConfigurationServerLockCommandArguments),
  emberCommandEntryActionWithDetails("read", emAfConfigurationServerReadCommand, "", "Read a token supported by the configuration server.", NULL),
  emberCommandEntryActionWithDetails("set", emAfConfigurationServerSetCommand, "vb", "Set a token supported by the configuration server.", emberCommandTablePluginConfigurationServerSetCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmLedBlinkCommandArguments[] = {
  "count",
  "time",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmLedOffCommandArguments[] = {
  "time",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmLedOnCommandArguments[] = {
  "time",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmLedPatternCommandArguments[] = {
  "count",
  "pattern",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmSetCommandArguments[] = {
  "Channel",
  "Value",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmStatusBlinkCommandArguments[] = {
  "count",
  "time",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmStatusOffCommandArguments[] = {
  "time",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmStatusOnCommandArguments[] = {
  "time",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTablePluginBulbPwmStatusPatternCommandArguments[] = {
  "count",
  "pattern",
  NULL
};
#endif

static EmberCommandEntry emberCommandTablePluginBulbPwmCommands[] = {
  emberCommandEntryActionWithDetails("ledBlink", emAfBulbPwmLedBlinkCommand, "uv", "Exercise the blink led command.", emberCommandTablePluginBulbPwmLedBlinkCommandArguments),
  emberCommandEntryActionWithDetails("ledOff", emAfBulbPwmLedOffCommand, "u", "Exercise the blink led off command.", emberCommandTablePluginBulbPwmLedOffCommandArguments),
  emberCommandEntryActionWithDetails("ledOn", emAfBulbPwmLedOnCommand, "u", "Exercise the blink led on command.", emberCommandTablePluginBulbPwmLedOnCommandArguments),
  emberCommandEntryActionWithDetails("ledPattern", emAfBulbPwmLedPatternCommand, "ub", "Exercise the blink led pattern command.", emberCommandTablePluginBulbPwmLedPatternCommandArguments),
  emberCommandEntryActionWithDetails("set", emAfBulbPwmSetCommand, "uv", "Set the channel to the specific value.", emberCommandTablePluginBulbPwmSetCommandArguments),
  emberCommandEntryActionWithDetails("statusBlink", emAfBulbPwmStatusBlinkCommand, "uv", "Exercise the blink status command.", emberCommandTablePluginBulbPwmStatusBlinkCommandArguments),
  emberCommandEntryActionWithDetails("statusOff", emAfBulbPwmStatusOffCommand, "u", "Exercise the blink status off command.", emberCommandTablePluginBulbPwmStatusOffCommandArguments),
  emberCommandEntryActionWithDetails("statusOn", emAfBulbPwmStatusOnCommand, "u", "Exercise the blink status on command.", emberCommandTablePluginBulbPwmStatusOnCommandArguments),
  emberCommandEntryActionWithDetails("statusPattern", emAfBulbPwmStatusPatternCommand, "ub", "Exercise teh blink status pattern command.", emberCommandTablePluginBulbPwmStatusPatternCommandArguments),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTablePluginCommands[] = {
  emberCommandEntrySubMenu("bulb-pwm", emberCommandTablePluginBulbPwmCommands, ""),
  emberCommandEntrySubMenu("configuration-server", emberCommandTablePluginConfigurationServerCommands, ""),
  emberCommandEntrySubMenu("idle-sleep", emberCommandTablePluginIdleSleepCommands, ""),
  emberCommandEntrySubMenu("mfglib", emberCommandTablePluginMfglibCommands, ""),
  emberCommandEntrySubMenu("ota-bootload", emberCommandTablePluginOtaBootloadCommands, ""),
  emberCommandEntrySubMenu("ota-client", emberCommandTablePluginOtaClientCommands, ""),
  emberCommandEntrySubMenu("ota-storage-common", emberCommandTablePluginOtaStorageCommonCommands, ""),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableOptionBindingTableSetCommandArguments[] = {
  "one byte index into the binding table",
  "cluster id to send with the discovery message",
  "local endpoint to bind",
  "remote endpoint to bind",
  "8 byte IEEE address provided big endian",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableOptionBindingTableCommands[] = {
  emberCommandEntryActionWithDetails("clear", optionBindingTableClearCommand, "", "Clear the binding table", NULL),
  emberCommandEntryActionWithDetails("print", optionBindingTablePrintCommand, "", "Prints out the binding table to the command line.", NULL),
  emberCommandEntryActionWithDetails("set", optionBindingTableSetCommand, "uvuub", "Set a binding table entry for the arguments specified.", emberCommandTableOptionBindingTableSetCommandArguments),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTableOptionApsretryCommands[] = {
  emberCommandEntryActionWithDetails("default", optionApsRetryCommand, "", "Forces the AppFramework to set/clear the APS Retry option (in APS Fram ...", NULL),
  emberCommandEntryActionWithDetails("off", optionApsRetryCommand, "", "Forces the AppFramework to set/clear the APS Retry option (in APS Fram ...", NULL),
  emberCommandEntryActionWithDetails("on", optionApsRetryCommand, "", "Forces the AppFramework to set/clear the APS Retry option (in APS Fram ...", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableOptionDiscCommandArguments[] = {
  "the profile id to send with the discovery message",
  "cluster id to send with the discovery message",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableOptionEdbCommandArguments[] = {
  "The local endpoint whose simple descriptor will be used to create the  ...",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableOptionCommands[] = {
  emberCommandEntrySubMenu("apsretry", emberCommandTableOptionApsretryCommands, ""),
  emberCommandEntrySubMenu("binding-table", emberCommandTableOptionBindingTableCommands, ""),
  emberCommandEntryActionWithDetails("disc", optionDiscoverCommand, "vv", "Sends a ZDO Match Descriptor Request for the server side of the specif ...", emberCommandTableOptionDiscCommandArguments),
  emberCommandEntryActionWithDetails("edb", optionEndDeviceBindCommand, "u", "Sends a ZDO End Device Bind Request using the given local endpoint.", emberCommandTableOptionEdbCommandArguments),
  emberCommandEntryTerminator()
};

static EmberCommandEntry emberCommandTableNetworkFindCommands[] = {
  emberCommandEntryActionWithDetails("joinable", findJoinableNetworkCommand, "", "Begins a search for a joinable networ ...", NULL),
  emberCommandEntryActionWithDetails("unused", findUnusedPanIdCommand, "", "Begins a search for an unused Channel and Pan I ...", NULL),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkBroadPjoinCommandArguments[] = {
  "Number of seconds during which devices will be allowed to join the net ...",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkChangeChannelCommandArguments[] = {
  "The channel to change to.",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkExtpanidCommandArguments[] = {
  "The bytes for the extended pan id",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkFormCommandArguments[] = {
  "The channel on which to form the network",
  "One byte signed value indicating the TX power that the radio should be ...",
  "Two byte pan id for the network",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkJoinCommandArguments[] = {
  "The channel on which to form the network",
  "One byte signed value indicating the TX power that the radio should be ...",
  "Two byte pan id for the network",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkPjoinCommandArguments[] = {
  "Number of seconds during which devices will be allowed to join the net ...",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkRejoinCommandArguments[] = {
  "Boolean indicating whether the device can rejoin secure or no ...",
  "4 byte channel mask which should be used to search for the network to  ...",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkRejoinDiffDeviceTypeCommandArguments[] = {
  "Boolean indicating whether the device can rejoin secure or no ...",
  "4 byte channel mask which should be used to search for the network to  ...",
  "An enumeration indicating the device type to rejoin a ...",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableNetworkSetCommandArguments[] = {
  "The network index to use for CLI commands",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableNetworkCommands[] = {
  emberCommandEntryActionWithDetails("broad-pjoin", networkPermitJoinCommand, "u", "Permit joining on the network for a given number of seconds AND broadc ...", emberCommandTableNetworkBroadPjoinCommandArguments),
  emberCommandEntryActionWithDetails("change-channel", networkChangeChannelCommand, "u", "Attempts to change device over to a different channel given in the cha ...", emberCommandTableNetworkChangeChannelCommandArguments),
  emberCommandEntryActionWithDetails("extpanid", networkExtendedPanIdCommand, "b", "Write the extended pan id for the device.", emberCommandTableNetworkExtpanidCommandArguments),
  emberCommandEntrySubMenu("find", emberCommandTableNetworkFindCommands, ""),
  emberCommandEntryActionWithDetails("form", networkFormCommand, "usv", "Create a network on the given channel, power and panId.", emberCommandTableNetworkFormCommandArguments),
  emberCommandEntryActionWithDetails("id", networkIdCommand, "", "Prints the current Node ID, EUI64, and Pan ID.", NULL),
  emberCommandEntryActionWithDetails("init", networkInitCommand, "", "Initialize a network; this is a test command used for tc-swap-out test ...", NULL),
  emberCommandEntryActionWithDetails("join", networkJoinCommand, "usv", "Join an existing network on the given channel, power and panId.", emberCommandTableNetworkJoinCommandArguments),
  emberCommandEntryActionWithDetails("leave", networkLeaveCommand, "", "Leave the current network.", NULL),
  emberCommandEntryActionWithDetails("pjoin", networkPermitJoinCommand, "u", "Permit joining on the network for a given number of seconds", emberCommandTableNetworkPjoinCommandArguments),
  emberCommandEntryActionWithDetails("rejoin", networkRejoinCommand, "uw", "Rejoin an existing network in a secure or insecure manner.", emberCommandTableNetworkRejoinCommandArguments),
  emberCommandEntryActionWithDetails("rejoin-diff-device-type", networkRejoinDiffDeviceTypeCommand, "uwu", "Rejoin an existing network in a secure or insecure manner with a diffe ...", emberCommandTableNetworkRejoinDiffDeviceTypeCommandArguments),
  emberCommandEntryActionWithDetails("set", networkSetCommand, "u", "Set the network index used by all future CLI command ...", emberCommandTableNetworkSetCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableInterpanGroupCommandArguments[] = {
  "group id to send to",
  "destination pan id",
  "destination profile ID",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableInterpanLongCommandArguments[] = {
  "long ieee address to send the interpan message to",
  "two byte destination PA ID",
  "two byte destination profile ID",
  "two byte options",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableInterpanShortCommandArguments[] = {
  "group id to send to",
  "destination pan id",
  "destination profile ID",
  NULL
};
#endif

static EmberCommandEntry emberCommandTableInterpanCommands[] = {
  emberCommandEntryActionWithDetails("group", interpanCommand, "vvv", "send an interpan message to a group id.", emberCommandTableInterpanGroupCommandArguments),
  emberCommandEntryActionWithDetails("long", interpanLongCommand, "bvvv", "Send an interpan message to a long address (8 byte eui64)", emberCommandTableInterpanLongCommandArguments),
  emberCommandEntryActionWithDetails("short", interpanCommand, "vvv", "Send an interpan message to a short id.", emberCommandTableInterpanShortCommandArguments),
  emberCommandEntryTerminator()
};

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableBsendCommandArguments[] = {
  "source endpoint to send a binding based message from",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableEchoCommandArguments[] = {
  "bool indicating whether to turn echo on (1) or off (0)",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableRawCommandArguments[] = {
  "two byte cluster id",
  "ZCL message, including ZCL header and payload",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableReadCommandArguments[] = {
  "endpoint of the attribute to read",
  "cluster id of the attribute to read",
  "attribute id of the attribute to read",
  "direction mask of the attribute to read (client=0 or server=1)",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableSendCommandArguments[] = {
  "short id of the device to send the message to",
  "The endpoint to send the message from",
  "The endpoint to send the message to",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableSendMulticastCommandArguments[] = {
  "group id of the multicast group to send the message to",
  "The endpoint to send the message from",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableTimesyncCommandArguments[] = {
  "two byte short id of the time server",
  "source endpoint to send time sync from",
  "destination endpoint to expect response on",
  NULL
};
#endif

#if defined(EMBER_COMMAND_INTEPRETER_HAS_DESCRIPTION_FIELD)
static PGM_P PGM emberCommandTableWriteCommandArguments[] = {
  "endpoint of the attribute to write",
  "cluster id of the attribute to write",
  "attribute id of the attribute to write",
  "direction mask of the attribute to write (client=0 or server=1)",
  "the attribute type as listed in the generated file attribute-type.h",
  "string of bytes you wish to write into the attribute table.",
  NULL
};
#endif

EmberCommandEntry emberCommandTable[] = {
  emberCommandEntryActionWithDetails("bsend", emAfCliBsendCommand, "u", "send using a binding based on the clusterId in the globalApsFrame and  ...", emberCommandTableBsendCommandArguments),
  emberCommandEntryActionWithDetails("echo", echoCommand, "u", "Turns echo on the command line on or off depending on the argument", emberCommandTableEchoCommandArguments),
  emberCommandEntryActionWithDetails("events", printEvents, "", "Print the list of timer events.", NULL),
  emberCommandEntryActionWithDetails("help", helpCommand, "", "Prints out the cli command options for the device", NULL),
  emberCommandEntryActionWithDetails("info", emAfCliInfoCommand, "", "Gives information about the local node", NULL),
  emberCommandEntrySubMenu("interpan", emberCommandTableInterpanCommands, ""),
  emberCommandEntrySubMenu("network", emberCommandTableNetworkCommands, ""),
  emberCommandEntrySubMenu("option", emberCommandTableOptionCommands, ""),
  emberCommandEntrySubMenu("plugin", emberCommandTablePluginCommands, ""),
  emberCommandEntrySubMenu("print", emberCommandTablePrintCommands, ""),
  emberCommandEntryActionWithDetails("raw", emAfCliRawCommand, "vb", "Creates a message by specifying the raw byte ...", emberCommandTableRawCommandArguments),
  emberCommandEntryActionWithDetails("read", emAfCliReadCommand, "uvvu", "Read an attribute from the local attribute tabl ...", emberCommandTableReadCommandArguments),
  emberCommandEntryActionWithDetails("reset", resetCommand, "", "resets the device", NULL),
  emberCommandEntryActionWithDetails("send", emAfCliSendCommand, "vuu", "Send a pre-buffered message from a given endpoint to an endpoint on a  ...", emberCommandTableSendCommandArguments),
  emberCommandEntryActionWithDetails("send_multicast", emAfCliSendCommand, "vu", "Send a pre-buffered multicast message to a given group id from a given ...", emberCommandTableSendMulticastCommandArguments),
  emberCommandEntryActionWithDetails("timesync", emAfCliTimesyncCommand, "vuu", "This sends a read attr for the time of the device specifie ...", emberCommandTableTimesyncCommandArguments),
  emberCommandEntryActionWithDetails("version", emAfCliVersionCommand, "", "Shows the version of the software", NULL),
  emberCommandEntryActionWithDetails("write", emAfCliWriteCommand, "uvvuub", "Write an attribute value into the local attribute table", emberCommandTableWriteCommandArguments),
  emberCommandEntrySubMenu("zcl", emberCommandTableZclCommands, ""),
  emberCommandEntrySubMenu("zdo", emberCommandTableZdoCommands, ""),
  CUSTOM_COMMANDS
  emberCommandEntryTerminator()
};



